export const UPDATE_SCAFFOLD_PROMPT_FALLBACK = `# Prompt: Update Repository Documentation and Agent Playbooks

## Purpose
You are an AI assistant responsible for refreshing the documentation (\`docs/\`) and agent playbooks (\`agents/\`) generated by the ai-context scaffolding tool. Your goal is to bring every guide up to date with the latest repository state, fill in placeholder sections, and maintain cross-references between docs and agent instructions.

## Context Gathering Checklist
1. Run \`git status -sb\` to understand pending changes.
2. Review the latest merged commits or PRs related to documentation, architecture, workflow, or testing.
3. Inspect \`package.json\`, CI configuration, and any release or roadmap notes stored in the repository.
4. Check \`docs/README.md\` for the current document map and update task markers (\`ai-task:*\`).
5. Identify unresolved placeholders marked as \`<!-- ai-slot:* -->\`.

## Update Procedure
1. **Select a Guide**
   - Navigate to \`docs/<guide>.md\`.
   - Read the YAML front matter (\`ai_update_goal\`, \`required_inputs\`, \`success_criteria\`) and ensure you collect the listed inputs before editing.

2. **Edit Within Task Wrappers**
   - Update content strictly inside the matching \`<!-- ai-task:... -->\` block.
   - Remove or replace any \`TODO\` text with accurate, current information.
   - When you complete a placeholder slot (\`<!-- ai-slot:... -->\`), remove the wrapper and provide the finalized description.

3. **Cross-Link Updates**
   - Verify that links between docs remain valid.
   - If you add new guides or sections, update \`docs/README.md\` and the document map table.

4. **Agent Playbook Alignment**
   - For each change in \`docs/\`, adjust the related \`agents/*.md\` playbooks.
   - Ensure the "Documentation Touchpoints" list references the correct \`ai-task\` markers.
   - Update collaboration checklists and evidence sections to reflect the latest workflows.

5. **Evidence & Traceability**
   - Note key sources (commit hashes, issues, ADRs) in the "Evidence to Capture" or "AI Update Checklist" summary lines.
   - If anything is ambiguous or requires human follow-up, leave a concise note clearly labelled for maintainers.

## Acceptance Criteria
- Every guide’s \`success_criteria\` field is satisfied.
- No unresolved \`TODO\` or \`ai-slot\` blocks remain unless they require explicit human input; in such cases, add a comment explaining the dependency.
- Agent playbooks list accurate responsibilities, best practices, and pointer links to the refreshed docs.
- Changes are self-contained, well-formatted Markdown, and reference any new external resources introduced.

## Deliverables
- Updated Markdown files committed to the repository.
- A short changelog or PR description summarizing:
  - Guides touched
  - Key decisions or facts added
  - Evidence links and any pending follow-ups
`;

export const UPDATE_PLAN_PROMPT_FALLBACK = `# Prompt: Update Collaboration Plans

## Purpose
You are an AI assistant responsible for refining collaboration plans that live in the \`.context/plans/\` directory. Each plan orchestrates work across documentation guides (\`docs/\`) and agent playbooks (\`agents/\`). Your goal is to replace placeholders with actionable guidance that keeps the plan aligned with the referenced docs, agents, and repository context.

## Preparation Checklist
1. Review the plan’s YAML front matter to understand the stated \`ai_update_goal\`, \`required_inputs\`, and \`success_criteria\`.
2. Inspect the provided documentation excerpts (from \`docs/\`) and agent playbooks to ensure the plan reflects their current guidance.
3. Confirm that the “Agent Lineup” and “Documentation Touchpoints” tables link to real files and reference the correct \`ai-task\` markers.
4. Note any TODOs, \`ai-slot\` placeholders, or missing evidence sections that must be resolved.

## Update Procedure
1. **Task Snapshot**
   - Summarize the primary goal and success signal in concrete terms.
   - List authoritative references (docs, issues, specs) that contributors should consult.

2. **Agent Alignment**
   - For each agent in the lineup, describe why they are involved and call out the first responsibility they should focus on.
   - Ensure playbook links and responsibility summaries match the referenced agent files.

3. **Documentation Touchpoints**
   - Map each plan stage to the docs excerpts provided, highlighting which sections need to be updated during execution.
   - Keep the table sorted and ensure the listed \`ai-task\` markers exist.

4. **Working Stages**
   - Break the work into clear stages with owners, deliverables, and evidence checkpoints.
   - Reference documentation and agent resources that the team should consult while executing each stage.

5. **Evidence & Follow-up**
   - Specify the artefacts that must be captured (PR links, test runs, change logs) before the plan is considered complete.
   - Record any follow-up actions or decisions that require human confirmation.

## Acceptance Criteria
- Every TODO or placeholder inside the plan’s \`ai-task\` block is resolved or accompanied by a clear escalation note.
- Tables reference existing files and stay in sync with the docs/agent indices.
- Stages provide actionable guidance, owners, and success signals.
- The plan remains fully self-contained and ready for contributors to execute.

## Deliverables
- Updated plan Markdown returned verbatim.
- No additional commentary outside the Markdown output.
`;
