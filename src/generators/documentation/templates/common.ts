import { DirectoryStat, DocumentationTemplateContext } from './types';

const KNOWN_DESCRIPTIONS: Record<string, string> = {
  src: 'TypeScript source files and CLI entrypoints.',
  dist: 'Compiled JavaScript output generated by the build step.',
  docs: 'Living documentation produced by this tool.',
  agents: 'AI agent playbooks and prompts.',
  tests: 'Automated tests and fixtures.',
  packages: 'Workspace packages or modules.'
};

export function formatDirectoryList(
  context: DocumentationTemplateContext,
  includePlaceholders: boolean
): string {
  if (context.topLevelDirectories.length === 0) {
    return '';
  }

  return context.topLevelDirectories
    .map(dir => {
      const description = KNOWN_DESCRIPTIONS[dir];
      if (description) {
        return `- \`${dir}/\` — ${description}`;
      }

      if (!includePlaceholders) {
        return `- \`${dir}/\``;
      }

      return `- \`${dir}/\` — TODO: Describe the purpose of this directory.`;
    })
    .join('\n');
}

export function buildDocumentMapTable(guides: DocumentationTemplateContext['guides']): string {
  const rows = guides.map(meta => `| ${meta.title} | \`${meta.file}\` | ${meta.primaryInputs} |`);
  return ['| Guide | File | Primary Inputs |', '| --- | --- | --- |', ...rows].join('\n');
}

export function formatDirectoryStats(stats: DirectoryStat[]): string {
  if (!stats.length) {
    return '*No directories detected.*';
  }

  return stats
    .map(stat => `- \`${stat.name}/\` — approximately ${stat.fileCount} files`)
    .join('\n');
}

export function formatInlineDirectoryList(directories: string[]): string {
  if (!directories.length) {
    return '`n/a`';
  }

  return directories.map(dir => `\`${dir}\``).join(', ');
}
