import * as fs from 'fs-extra';
import * as path from 'path';
import chalk from 'chalk';
import { RepoStructure } from '../../types';

export class GeneratorUtils {
  static formatBytes(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  static slugify(text: string): string {
    return text
      .toLowerCase()
      .replace(/\s+/g, '-')
      .replace(/[^a-z0-9-]/g, '');
  }

  static formatModuleName(name: string): string {
    return name
      .split(/[-_]/)
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }

  static formatTitle(text: string): string {
    return text.split('-').map(word => 
      word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ');
  }

  static async ensureDirectoryAndLog(dir: string, verbose: boolean, description: string): Promise<void> {
    await fs.ensureDir(dir);
    if (verbose) {
      console.log(chalk.blue(`üìÅ ${description}: ${dir}`));
    }
  }

  static async writeFileWithLogging(
    filePath: string, 
    content: string, 
    verbose: boolean, 
    successMessage?: string
  ): Promise<void> {
    const fileName = path.basename(filePath);
    
    if (verbose) {
      console.log(chalk.blue(`üìÑ Creating ${fileName}...`));
    }

    await fs.writeFile(filePath, content);

    if (verbose) {
      console.log(chalk.green(`‚úÖ ${successMessage || `Created ${fileName}`}`));
    }
  }

  static logError(message: string, error: any, verbose: boolean): void {
    if (verbose) {
      console.log(chalk.red(`‚ùå ${message}: ${error}`));
    }
  }

  static logProgress(message: string, verbose: boolean): void {
    if (verbose) {
      console.log(chalk.yellow(message));
    }
  }

  static getFileTypeDistribution(repoStructure: RepoStructure): Map<string, number> {
    const extensions = new Map<string, number>();
    repoStructure.files.forEach(file => {
      const ext = file.extension || 'no-extension';
      extensions.set(ext, (extensions.get(ext) || 0) + 1);
    });
    return extensions;
  }

  static getTopFileExtensions(repoStructure: RepoStructure, limit: number = 5): Array<[string, number]> {
    const extensions = this.getFileTypeDistribution(repoStructure);
    return Array.from(extensions.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, limit);
  }

  static createTimestamp(): string {
    return new Date().toISOString();
  }

  static createGeneratedByFooter(additionalInfo?: string): string {
    return `---
*Generated by AI Coders Context*
${additionalInfo ? `*${additionalInfo}*` : ''}
*Generated on: ${this.createTimestamp()}*
`;
  }
}
